
@import "octicon-mixins.less"; // https://github.com/atom/atom/blob/master/static/variables/octicon-mixins.less

@tree-view-indent:  1rem;
@chevron-size:      10px;
@icon-size:         1.2em;
@line-height:       @component-line-height * 1rem;

// List views
.list-group,
.list-tree {

  // Default indentation for subitems
  padding: 0 0 0 @tree-view-indent;

  // Normal entries
  li.list-item {
    .text(normal);
    padding:     0 !important;
    height:      @line-height;
    line-height: @line-height }

  // Icons
  li.list-item::before,
  div.list-item::before {
    color: inherit;
  }

  // Foldable items (folders etc)
  li.list-nested-item div.list-item {
    padding:     0 !important;
    height:      @line-height;
    line-height: @line-height }

  &.has-collapsable-children li.list-nested-item {
    padding: 0 !important;
    margin:  0 !important }

  // Carets
  &.has-collapsable-children li.list-nested-item {
    div.list-item::before {
      vertical-align: middle !important;
      text-align:     center !important;
      font-size:      @chevron-size !important;
      content:        "\f078";
      margin:         0;
      display:        inline-block;
      transform:      rotate(0deg) }

    &.expanded > .list-item::before {
      transform:   rotate(90deg) }

    &.expanded  > .list-item::before,
    &.collapsed > .list-item::before {
      width:       @line-height;
      height:      @line-height;
      line-height: @line-height;
      transition:  transform @transition-duration }}


  .generate-list-item-text-color(@color, @class) {
    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class} > .list-item {
      .text(@class);
      color: @color }}

  .generate-list-item-text-color(@text-color-subtle, subtle);
  .generate-list-item-text-color(mix(@text-color-info, @text-color), info);
  .generate-list-item-text-color(mix(@text-color-success, @text-color), success);
  .generate-list-item-text-color(mix(@text-color-warning, @text-color), warning);
  .generate-list-item-text-color(mix(@text-color-error, @text-color), error);
  .generate-list-item-text-color(@text-color-selected, selected);

  .list-item-status(@text-color-subtle, ignored);
  .list-item-status(@text-color-added, added);
  .list-item-status(@text-color-renamed, renamed);
  .list-item-status(@text-color-modified, modified);
  .list-item-status(@text-color-removed, removed);

  li:not(.list-nested-item).selected,
  li.list-nested-item.selected > .list-item {
    .text(selected) }}

.select-list ol.list-group,
&.select-list ol.list-group {
  li.two-lines {
    .secondary-line { color: @text-color-subtle; }
    &.selected .secondary-line {
      color: @text-color;
      text-shadow: none }}

  // We want to highlight the background of the list items because we dont
  // know their size.
  li.selected {
    background-color: @background-color-selected;
    &:before { display: none }}

  &.mark-active{
    @active-icon-size: 14px;

    // pad in front of the text where the icon would be We'll pad the non-
    // active items with a 'fake' icon so other classes can pad the item
    // without worrying about the icon padding.
    li:before {
      content: '';
      background-color: transparent;
      position: static;
      display: inline-block;
      left: auto; right: auto;
      height: @active-icon-size;
      width: @active-icon-size }

    > li:not(.active):before {
      margin-right: @component-icon-padding }

    li.active {
      .octicon(check, @active-icon-size);

      &:before {
        margin-right: @component-icon-padding;
        color: @text-color-success }}}}

.select-list.popover-list {
  background-color:   @overlay-background-color;
  box-shadow:         0 0 10px fade(black, 20%);
  padding:            @component-padding @component-padding * 0.75;
  border-radius:      @component-border-radius;
  border-color:       darken(@overlay-border-color, 3%);
  margin-top:         3rem;

  li.selected, li.selected * {
    color: @text-color-highlight !important }

  .list-group li { }}

.ui-sortable {

  li { line-height: 2.5 }

  // For sortable lists in the settings view
  li.ui-sortable-placeholder {
    visibility:       visible !important;
    background-color: darken(@pane-item-background-color, 10%) }}

li.ui-draggable-dragging,
li.ui-sortable-helper {
  line-height:   @component-line-height;
  height:        @component-line-height;
  border:        0;
  border-radius: 0;
  list-style:    none;
  padding:       0 @component-padding;
  background:    @background-color-highlight;
  box-shadow:    0 0 1px @base-border-color }


@leaf:    ~"li:not(.list-nested-item)";
@branch:  ~"li.list-nested-item";

.list-item-status(@color, @status) {
  @LEAF: ~"@{leaf}.status-@{status}";

  // Leaf nodes
  @{LEAF},
  @{LEAF} > .list-item {
    color: mix(@color, @text-color, 55%) }

  // Selected leaf nodes
  @{LEAF}.selected,
  @{LEAF}.selected > .list-item {
      color: mix(@color, @text-color, 88%) }}
